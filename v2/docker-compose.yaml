version: '3.5'

# mkdir -p data/primary && mkdir -p data/replica && mkdir -p data/rails && docker-compose build && docker-compose down && docker-compose up -d && docker-compose ps

services:
  # https://hub.docker.com/_/mysql
  mysql-1:
    # docker exec -it mysql-1 bash
    # mysql -h mysql-1 -u root -pexample
    container_name: mysql-1
    hostname: mysql-1
    build:
      context: .
      dockerfile: Dockerfile-mysql-primary
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOT_PASSWORD}
      MYSQL_ROOT_HOST: "%"
      MYSQL_USER: app
      MYSQL_PASSWORD: ${APP_PASSWORD}
      MYSQL_DATABASE: my-app
      REPLICATION_USER: replication
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      # the trick to test two mysql instances on your laptop
      - "127.0.0.1:3306:3306"
    volumes:
      - ./data/primary:/var/lib/mysql
      - ./mysqld-primary.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - ./001-initialize-primary.sh:/docker-entrypoint-initdb.d/001-initialize.sh
    working_dir: /var/lib/mysql
  mysql-2:
    # docker exec -it mysql-2 bash
    # mysql -h mysql-2 -u root -pexample
    container_name: mysql-2
    hostname: mysql-2
    build:
      context: .
      dockerfile: Dockerfile-mysql-replica
    environment:
      # Don't use MYSQL_USER, MYSQL_PASSWORD and MYSQL_DATABASE for mysql-2, initial replication fails due to differences
      MYSQL_ROOT_PASSWORD: ${ROOT_PASSWORD}
      MYSQL_ROOT_HOST: "%"
      REPLICATION_USER: replication
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      # the trick to test two mysql instances on your laptop - this is your local IP
      - "192.168.2.100:3306:3306"
    volumes:
      - ./data/replica:/var/lib/mysql
      - ./mysqld-replica.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
    working_dir: /var/lib/mysql
  rails-1:
    container_name: rails-1
    hostname: rails-1
    build:
      context: .
      dockerfile: Dockerfile-rails
    command: >
      bash -c "
      cd /app && bundle install && rails db:migrate ; rails s -p 5000 -b 0.0.0.0
      ; tail -F /dev/null"
    volumes:
      - ./rails:/app
    ports:
      - "5000:5000"
    working_dir: /app
  rails-2:
    container_name: rails-2
    hostname: rails-2
    build:
      context: .
      dockerfile: Dockerfile-rails
    command: >
      bash -c "
      cd /app && bundle install && rails db:migrate ; rails s -p 5000 -b 0.0.0.0
      ; tail -F /dev/null"
    volumes:
      - ./rails:/app
    ports:
      - "5000:5000"
    working_dir: /app
  mysql-monitor:
    # docker exec -it mysql-monitor bash
    container_name: mysql-monitor
    hostname: mysql-monitor
    build:
      context: .
      dockerfile: Dockerfile-mysql-monitor
    depends_on:
      - "mysql-1"
      - "mysql-2"
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOT_PASSWORD}
      REPLICATION_USER: replication
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
      CDN_AUTH_KEY: ${CDN_AUTH_KEY}
      CDN_AUTH_EMAIL: ${CDN_AUTH_EMAIL}
      CDN_API_ADDRESS: ${CDN_API_ADDRESS}
    command: >
      bash -c "
      tail -F /tmp/mysqlfailover.log > /dev/console
      & sleep 5
      && mysqlfailover --force --master=root:${ROOT_PASSWORD}@mysql-1:3306 --discover-slaves-login=root:${ROOT_PASSWORD} --daemon nodetach --log=/tmp/mysqlfailover.log --pedantic --exec-after=/scripts/mysqlfailover_exec_after.sh --verbose auto
      ; tail -F /dev/null"
    user: 'root'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./mysqlfailover_exec_after.sh:/scripts/mysqlfailover_exec_after.sh
      - ./mysqlswitchover_exec_after.sh:/scripts/mysqlswitchover_exec_after.sh
    stdin_open: true
    tty: true
    working_dir: /scripts
